# Emacs mode:  -*-Makefile-*-

#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
# The Initial Developer of the Original Code and related documentation
# is America Online, Inc. Portions created by AOL are Copyright (C) 1999
# America Online, Inc. All Rights Reserved.
#
#
#
# $Header: /Volumes/DATEN0/develop/local/CVS/dev/naviserver/include/Makefile.win32,v 1.1.1.1 2008/02/18 15:49:10 zoran Exp $

#
# Makefile.win32 --
#
# 	Common nmake file for NaviServer Win32 builds.
#
# Usage:
#
#	Create a stub makefile which defines one or more of the following
#	and includes this file:
#
#	DLL	Basename of a DLL, e.g., "DLL=myapi" builds "myapi.dll" and
#		"myapi.lib".
#
#	PGM	Basename of a program, e.g., "PGM=mybin" builds "mybin.exe".
#
#	MODOBJS	List of objects to be built for MOD.
#	LIBOBJS	List of objects to be built for DLL.
#
#	PGMOBJS	List of objects for PGM.  The program will also be linked
#		against a DLL, if any.
#
#	In addition, you can also define:
#
#	NAVISERVER  Installation directory (default "c:\ns").
#	TCLPATH	    Path to Tcl installation
#	TCLLIB	    Tcl .lib file to use for linking
#	DEBUG	    If == 1 build debug version.
#	DEFS	    Additional CFLAGS, e.g., "/D MYDLL_EXPORTS.".
#	LIBS	    Additional libraries, e.g., "/LIBPATH:c:\fun fun.lib"
#	INSTALL	    Additional install directives, e.g., "install-config".
#	NSBUILD	    If set, build from sources.
#

!ifdef NAVISERVER
!  if ("" == "$(NAVISERVER)" || "..\naviserver" == "$(NAVISERVER)")
!    message Warning: Ignoring bogus value for NAVISERVER install dir:  $(NAVISERVER)
!    undef NAVISERVER
!  endif
!endif

!ifndef NSBUILD
!  if defined(NAVISERVER)
!    message Notice: Setting NSBUILD=0, linking against installed NAVISERVER in:  $(NAVISERVER)
NSBUILD=0
!  else
!    message Notice: Setting NSBUILD=1 to build from source, NaviServer not yet installed.
NSBUILD=1
!  endif
!endif

!ifndef NS_CORE_P
!if (0 == $(NSBUILD))
#!    message Debug: Building non-core module against already installed NaviServer.
NS_CORE_P=0
!elseif exist("..\nsthread\winthread.c")
#!    message Debug: Building core module.
NS_CORE_P=1
!else
#!    message Debug: Building non-core module in source tree.
NS_CORE_P=0
!endif
!endif

!if (0 == $(NSBUILD))
NS_DIR = $(NAVISERVER)
!elseif (1 == $(NSBUILD) && (1 == $(NS_CORE_P)))
  # Core module directory structure is always inside the naviserver
  # source directory, e.g. "naviserver/nssock/".
NS_DIR = ..
!elseif (1 == $(NSBUILD) && (0 == $(NS_CORE_P)))
  # We assume the typical non-core module source location, my-module/ located alongside naviserver/.
NS_DIR = ..\naviserver
!else
!  error Error: Bug, cannot determine how to set NS_DIR.
!endif

!ifndef NAVISERVER
NAVISERVER = C:\ns
!endif

# Strangely, the module-specific Makefiles set e.g. "MOD = nscgi.so",
# *with* the trailing *.so!  That seems wrong to me, but rather than
# change it we will cope with it here by stripping the .so suffix:
# --atp@piskorski.com, 2014/10/02 12:56 EDT

# If the module Makefile set DLL use that, but if not fall back to the
# module name given in MOD:
!ifndef DLL
!  ifdef MOD
# TODO: Unfortunately this removes the literal string ".so" from
# ANYWHERE in the string, not solely at the end:
DLL = $(MOD:.so=)
!  endif
!endif

!ifndef NS_DB_P
!if ("nsdbtest" == "$(DLL)")
NS_DB_P=1
!else
NS_DB_P=0
!endif
!endif

# To activate zlib, provide location of include and library files here
# and activate HAVE_ZLIB in nsconfig-win32.h, and make sure, zlib is
# installed on your system

!if "" == "$(ZLIB)"
!if "" == "$(ZLIBSRC)"
zlib_lib=c:\P\lib
zlib_include=c:\P\include
!else
zlib_lib=..\nsd\zlib
zlib_include=$(ZLIBSRC)
!endif
!else
zlib_lib=$(ZLIB)\lib
zlib_include=$(ZLIB)\include
!endif

# For past OpenSSL-related link problems, see:
#   https://sourceforge.net/p/naviserver/mailman/message/36519758/
#   [naviserver-devel] Windows nsd build breaks on tclhttp.c SSL_get_cipher

# Several places to get pre-compiled Windows OpenSSL libraries:
# http://www.slproweb.com/products/Win32OpenSSL.html
# - Win32OpenSSL-1_0_1i.exe and Win64OpenSSL-1_0_1i.exe, c. 2014-08-06.
#   Use:  openssl_libs = ssleay32MDd.lib libeay32MDd.lib
# - Win32OpenSSL-1_1_1a.exe and Win64OpenSSL-1_1_1a.exe, c. 2018-11-21.
#   Use:  openssl_libs = libssl32MTd.lib libcrypto32MTd.lib
# https://indy.fulgan.com/SSL/
# - openssl-1.0.2q-i386-win32.zip  , openssl-1.0.2q-i386-win32_LinkLibs.zip
# - openssl-1.0.2q-x64_86-win64.zip, openssl-1.0.2q-x64_86-win64_LinkLibs.zip
#   Use:  openssl_libs = ssleay32.lib libeay32.lib

!if "" == "$(OPENSSL)"
openssl_64 = C:\P\OpenSSL-Win64
openssl_32 = C:\P\OpenSSL-Win32
#openssl_64 = C:\P\openssl-indy_1.0.2q\64
#openssl_32 = C:\P\openssl-indy_1.0.2q\32
!else
openssl_64 = $(OPENSSL)
openssl_32 = $(OPENSSL)
!endif

# Make sure you also add e.g. C:\P\OpenSSL-Win64\bin to your system PATH,
# so that NaviServer finds the libssl*.dll it needs when it runs.

# We have lots of flavors of the OpenSSL libraries.  I normally build
# NaviServer with /MDd, so presumably we need the corresponding
# *MDd.lib libraries here.  (TODO: How to autodetect this correctly?)

# Same sort of code as for TCLPATH in naviserver/Makefile.win32:
!if "" == "$(TARGET_CPU)"
TARGET_CPU = $(VSCMD_ARG_TGT_ARCH)
!endif
!if "x86" == "$(TARGET_CPU)"
#openssl_libs = ssleay32.lib libeay32.lib
#openssl_libs = ssleay32MDd.lib libeay32MDd.lib
openssl_libs = libssl32MDd.lib libcrypto32MDd.lib
openssl_dir = $(openssl_32)
!elseif "x64" == "$(TARGET_CPU)"
openssl_libs = libssl64MDd.lib libcrypto64MDd.lib
openssl_dir = $(openssl_64)
!else
!message Warning: Unexpected TARGET_CPU:  $(TARGET_CPU)
openssl_dir = $(openssl_64)
!endif
#!message openssl_dir is set to:  $(openssl_dir)

#
# Update options when building from sources or installed location.
#
#!message Debug:  PGM:  $(PGM)   DLL:  $(DLL)
#!message Debug:  NSBUILD: $(NSBUILD)  NS_CORE_P: $(NS_CORE_P)  NS_DB_P: $(NS_DB_P)  NAVISERVER: $(NAVISERVER)

!if (0 == $(NSBUILD))
!  message Debug: Building module against an already-installed NaviServer.  DLL: $(DLL)  NAVISERVER: $(NAVISERVER)
LIBS = $(LIBS) /LIBPATH:"$(NS_DIR)\lib" libnsd.lib nsthread.lib

!elseif (0 == $(NS_CORE_P))
!  message Debug: Building non-core module against NaviServer source tree.  DLL: $(DLL)
LIBS = $(LIBS) /LIBPATH:"$(NS_DIR)\nsd" libnsd.lib /LIBPATH:"$(NS_DIR)\nsthread" nsthread.lib
!if (1 == $(NS_DB_P))
DEFS = $(DEFS) /I "$(NS_DIR)\nsdb"
!endif

!else
!  message Debug: Building NaviServer core.  DLL: $(DLL)  PGM: $(PGM)  zlib: $(zlib_lib)

   # Ok to link everything against nsthread EXCEPT for nsthread itself:
!  if "$(DLL)" != "nsthread"
LIBS = $(LIBS) /LIBPATH:"$(NS_DIR)\nsthread" nsthread.lib
!  endif

   # nsd is built next, so it may link to nsthread, but NOT itself.
   # Ok to link all later libraries to both nsthread and nsd:
!  if ("$(PGM)" != "nsd" && "$(DLL)" != "nsd" && "$(DLL)" != "libnsd" && "$(DLL)" != "nsthread")
LIBS = $(LIBS) /LIBPATH:"$(NS_DIR)\nsd" libnsd.lib
!  endif

!  if ("nsssl" == "$(DLL)" || "nsd" == "$(PGM)")
   # Since c. 2016, nsd.exe needs to link against OpenSSL, otherwise you get
   # "unresolved external symbol" for _SSL_get_version and _SSL_get_cipher:
LIBS = $(LIBS) "/LIBPATH:$(openssl_dir)\lib\VC" $(openssl_libs)
!  endif

!  if ("nsd" == "$(PGM)" && "$(zlib_lib)" != "")
LIBS = $(LIBS) /LIBPATH:"$(zlib_lib)" zlib.lib
!  endif

!endif

#!message Debug: NS_DIR: $(NS_DIR)
INCDIR = $(NS_DIR)\include
!if (1 == $(NS_DB_P))
LIBS = $(LIBS) /LIBPATH:"$(NS_DIR)\nsdb" nsdb.lib
!endif


#
# Install directories.
#

INSTBIN	= "$(NAVISERVER)\bin\"
INSTLIB	= "$(NAVISERVER)\lib\"
INSTINC	= "$(NAVISERVER)\include\"
INSTTCL	= "$(NAVISERVER)\tcl\"

#
# Install utilities
#

INSTALL_DATA	= copy /y
INSTALL_SH	= copy /y
RM		= del /q /f

#
# Tcl directories
#

!ifdef TCLPATH
DEFS	= $(DEFS) /I "$(TCLPATH)\include"
LIBS	= $(LIBS) /LIBPATH:"$(TCLPATH)\lib"
!endif
!ifdef TCLLIB
LIBS	= $(LIBS) $(TCLLIB)
!else
LIBS	= $(LIBS) tcl84t.lib
!endif

#
# Common compiler and linker options.
#

COPTS	= /W3 /nologo /c /EHsc /DEBUG

DEFS	= $(DEFS) /D "_WINDOWS" /D "TCL_THREADS=1" \
		  /D "FD_SETSIZE=128" /D "_MBCS" \
		  /D _CRT_SECURE_NO_WARNINGS /D _CRT_SECURE_NO_DEPRECATE

LOPTS   = /NOLOGO /SUBSYSTEM:CONSOLE /OPT:NOREF /OPT:NOICF

# Tcl always uses _USE_32BIT_TIME_T on 32-bit Windows, so we must as well:
!if "x86" == "$(TARGET_CPU)"
DEFS = $(DEFS) /D _USE_32BIT_TIME_T
!endif

#
# Variables for building a DLL module.
#

!ifdef DLL
DLLBIN  = $(DLL).dll
DLLLIB  = $(DLL).lib
BUILD	= $(BUILD) $(DLLBIN)
INSTALL = $(INSTALL) install-dll
CLEAN	= $(CLEAN) clean-dll
OBJS	= $(OBJS) $(WINOBJS) $(DLLOBJS) $(MODOBJS) $(LIBOBJS)
HDRS	= $(HDRS) $(INCDIR)\ns.h $(INCDIR)\nsthread.h
!message Library names are:  DLLBIN: $(DLLBIN)  DLLLIB: $(DLLLIB)

!ifdef DLLINIT
DLLOPTS	= /EXPORT:$(DLLINIT)
!elseif "$(DLL)" == "nsthread" || "$(DLL)" == "nsd" || "$(DLL)" == "libnsd"
# nsthread and nsd do NOT define Ns_ModuleInit functions.
DLLOPTS	= 
!else
# Each normal individual NaviServer module defines a "NS_EXPORT int
# Ns_ModuleInit" function, so do NOT also export it here.  If you do
# then on 64-bit Windows you will get "LNK4197: export 'Ns_ModuleInit'
# specified multiple times" warnings:  --atp@piskorski.com, 2014/10/02

#DLLOPTS = /EXPORT:Ns_ModuleInit
!endif

!if "$(DLL)" == "nsdb"
DLLOPTS = $(DLLOPTS) /EXPORT:Ns_LogSqlDebug
!endif

!endif


#
# Variables for building a program, optionally with corresponding DLL.
#

!ifdef PGM
PGMBIN	 = $(PGM).exe
BUILD	 = $(BUILD) $(PGMBIN)
INSTALL	 = $(INSTALL) install-pgm
CLEAN  	 = $(CLEAN) clean-pgm
!ifdef DLL
PGMLIBS  = $(PGMLIBS) $(DLLLIB)
!endif
!endif


#
# Update options for release or debug build.
#
# /GS, GuardStack info:
#   https://learn.microsoft.com/en-us/archive/msdn-magazine/2017/december/c-visual-c-support-for-stack-based-buffer-protection
# /RTC1, Native Run-Time Checks:
#   https://learn.microsoft.com/en-us/previous-versions/ms856580(v=msdn.10)
#   https://learn.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2012/8wtf2dfz(v=vs.110)

!if "$(DEBUG)" == "1"
COPTS	= $(COPTS) /MDd /Od /Zi /RTC1 /GS
DEFS	= $(DEFS) /D "_DEBUG"
LOPTS	= $(LOPTS) /DEBUG
!else
COPTS	= $(COPTS) /MD /O2 /GS
DEFS	= $(DEFS) /D "NDEBUG"
!endif


#
# Final flags for compiler and linker
#

CFLAGS  = $(COPTS) /I "$(INCDIR)" /I "$(openssl_dir)\include" /I "$(zlib_include)" $(DEFS)
LIBS	= $(LIBS) $(TCLLIB) kernel32.lib advapi32.lib ws2_32.lib user32.lib


#
# Rules.
#

all build: $(BUILD)

install: $(INSTALL)

clean: $(CLEAN)

!ifdef DLL
$(DLLBIN): $(OBJS)
	link.exe $(LOPTS) $(DLLOPTS) /DLL /OUT:$(DLLBIN) /IMPLIB:$(DLLLIB) $(OBJS) $(DLLLIBS) $(LIBS)
!endif

!ifdef PGM
$(PGMBIN): $(PGMOBJS) $(DLLLIB)
	link.exe $(LOPTS) $(PGMOPTS) /OUT:$(PGMBIN) $(PGMOBJS) $(PGMLIBS) $(LIBS)
!endif

!ifdef OBJS
$(OBJS): $(HDRS)
!endif

.c.o:
	$(CC) $(CFLAGS) /c /Fo$*.o $*.c

install-dll: $(DLLBIN) $(DLLLIB)
	$(INSTALL_SH) $(DLLBIN) $(INSTBIN)
	$(INSTALL_SH) $(DLLLIB) $(INSTLIB)
!ifdef DLLHDRS
	$(INSTALL_DATA) $(DLLHDRS) $(INSTINC)
!endif
!ifdef DLLTCL
	$(INSTALL_DATA) $(DLLTCL) $(INSTTCL)
!endif

install-pgm: $(PGMBIN)
	$(INSTALL_SH) $(PGMBIN) $(INSTBIN)

install-tcl:
	$(INSTALL_DATA) *.tcl $(INSTTCL)

install-include:
	$(INSTALL_DATA) *.h $(INSTINC)
	$(INSTALL_DATA) Makefile.win32 $(INSTINC)

install-lib:
	$(INSTALL_DATA) *.lib $(INSTLIB)

clean-extra:
	$(RM) *.exp *.ilk *.pdb *.manifest

clean-dll: clean-extra
	$(RM) $(OBJS) $(DLLBIN) $(DLLLIB)

clean-pgm:
	$(RM) $(PGMBIN) $(PGMOBJS)

.PHONY: clean-dll clean-pgm install-dll install-pgm
